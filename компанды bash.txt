КОМАНДЫ ТЕРМИНАЛ


Если терминал перейдёт в режим ввода, выйти из него можно, нажав дважды комбинацию клавиш Ctrl+D
pwd						- покажет текущюю директорию

cd .. 					- перейти на директорию уровнем выше

du -h					- показывает размер папок без учета размера файлов

du -a 					- показывает размер папок и файлов в них

du -a -h 				- показывает размер папок и файлов в них в человекопонятном размере файлов и папок

ls -a					- показывет все файлы и папки в директории с учетом скрытых

ls -la					- показывет все файлы и папки в директории с учетом скрытых и их свойства (чтение-запись)

man <имя команды> 		- покажет мануал команды, изучив который станет понятны доп опции к ней

cat 					- открыть файл	
																					
head -n					- прочитать только начало файла 																	- head -6 ../../../home/tirion/.bashrc
						опция -n - отразить n строк.
						
tail					- прочитать только конец файла

less					- открыть файл в режиме пейджера (загружает только то, что влазить на страницу)
grep [OPTIONS] 			- поиск внутри файла(ов)																			- grep then ../../../home/tirion/.bashrc																					
[-e PATTERN]...  		PATTERN — это то, что мы хотим найти
[-f FILE]...  			FILE — путь до файла, в котором нужно искать
[FILE...]				
						Количество отображаемых строк до искомой строки — -B или --before-context
						Количество отображаемых строк после искомой — -A или --after-context
						Количество отображаемых строк до и после искомой строки — -C или --context	
						-r — указывает, что надо искать внутри директории. 
						
nano .bashrc			- открывает файл для редактирования в консоли. .bashrc - имя файла

vim .bashrc				- открывает файл для редактирования в консоли. .bashrc - имя файла

ls -la > output			-результат испонения комнады будет записан в файл output. файл будет размещен в текущей директории.
						Если нужно не перезаписывать, а добавлять, то используйте >>
						
						# > Заменяет содержимое файла
						echo 'hi' > result # Вывод команды echo направляем в файл result
						cat result # С помощью команды cat читаем файл result

						hi # Содержимое файла result в окне терминала

						echo 'hello' > result # Вывод команды echo заменяет содержимое файла result
						cat result # С помощью команды cat читаем файл result

						hello # Содержимое файла result в окне терминала

						# >> Добавляет содержимое в конец файла
						echo 'hello' >> result # Вывод команды echo добавляем в конец файла result
						cat result # С помощью команды cat читаем файл result

						# Так выглядит содержимое файл result в окне терминала:
						hello
						hello	
						
wc -l < result 			- Содержимое файла result отправляем в стандартный ввод команды wc

grep alias .bashrc | grep color 	- | пайп. или иными словами символ "И"

cat source | grep Dog | uniq | sort	- пример. прочитай файл source найди в нем Dog, не обращай внимание на дубликаты и отсортируй

touch					- создает файл

rm						- удалить файл

mv						- переименовать файл (команда move)
						touch file
						mv file renamed-file
						
cp						- копирование файла или директории. если директории, то добавиь флаг -r
						cp renamed-file renamed-file-copy
						
mkdir <dir_name>		- создание директории, например, mkdir my-dir		
						флаг -p - рекурсивное создание директорий, например, mkdir -p one/two/three	
						
rm -r my-dir			- удалить директорию (это рекурсия, удалетс последовательно все файлы,пока не удалятся все, потом директория)		
						флаг f позволит по умолчанию соглашаться с удалением файлов *да, для всех -rf


env						- посмотреть установленные переменные

echo $HOME				- вывод на экран значения переменной HOME
						HOME=<директория/> =без пробелов - задаем домашнюю директорию
history					- выведет историю введенных команд Bash
						реверсивный поиск. Если нажать комбинацию Ctrl + r, то запустится поиск по истории. 
						Он ожидает ввода символов и сразу отображает ближайшую команду, в которой эти символы встречаются. 
						Если найденное соответствие вас не устроило, то повторное нажатие Ctrl + r выберет следующее соответствие из истории

sudo					- использовать перед командой, если на выполнение команды не хватает прав 
						# Нет прав на выполнение
						touch /etc/myfile
						touch: cannot touch '/etc/myfile': Permission denied
						# С `sudo` все работает
						sudo touch /etc/myfile
						
sudo -u nobody mkdir /tmp/test - Директория создана от имени пользователя nobody

echo "Hello, World!" | sudo tee myfile - записаь в файл myfile Hello, World!. если файла нет - он создастся. с sudo потому что нужны были права администратора


# Пример строчки из вывода команды ls -la
-rw-r--r-- 1 kirill.m kirill.m 3771 Aug 31  2015 .bashrc		
- — этот символ обозначает, что перед нами файл
rw- — права первого типа (для владельца файла). Владелец может читать этот файл (r) и писать в него (w). Прочерк в конце означает, что этот файл нельзя исполнять
r-- — права второго типа (для группы владельца). В нашем случае такие права есть у тех, кто входит в группу kirill.m. Запись r-- говорит о наличии доступа только для чтения, а изменение и исполнение запрещены.
r-- — права третьей группы (все остальные). В нашем случае права совпадают со второй группой, поэтому файл доступен только для чтения

chmod 					- изменение прав доступа к файлам и директориям. chmod +r file.txt											
						владельца файла (u);
						других пользователей, входящих в группу владельца (g);
						всех прочих пользователей (o);
						chmod u=rx,g=x,o=x myfile
						
./<имя программы>		- запуск программы из текущей директории

dpkg -L <название программы> 	- Чтобы указать полные пути к установленным файлам пакета
						
						
						
						
						
						
						
						
						
						
						


