#include <stdio.h>      	// чтобы работали scanf и printf
#include <assert.h>     	// чтобы работал assert
#include <math.h>       	// чтобы работали математически сложные функции
#include "myfile.h" 		// свой проект, имя файла 
#include <stdlib.h>     	// нужно для malloc и free
				// нужно для qsort (универсальная сортировка массива)
#include <string.h>		// нужно для функции копирования массивов 
				void *memcpy(void *dest, const void *src, size_t n);
				
				// нужно для функции заполнения массива элементами
				void *memset(void *s, int c, size_t n);
				
				// стандартная функция strcmp(s1,s2) посимвольная разница между строками. 
				если == 0, то одинаковые

!!!				// стандартная функция srtlen(char *s) - длина строки, не считая '\0'
				printf("%zd", strlen("abc"); // 3

				// стандартная функция strcat к одной строке добавить другую.
				char *strcat(char *dest, const char *src);
				char *strncat(char *dest, const char *src, size_t n);
				strcat("hi", "=hello"); //hi=hello
				
				// strchr, strrchr - поиск символа в строке
				char *strchr(const char *s, int c);     // слева направо
				char *strrchr(const char *s, int c);    // справа (right) налево

 				// strstr - поиск подстроки в строке
				char *strstr(const char *str, const char *substr);

				// strtok - разбор строки по токенам (словам)
				char s[] = "a,bb; cccc?dd";         // текст
				const char * delim = ",;?!. \t";    // алфавит разделителей
				for (char * p = strtok(s, delim);   // начинаем разбор, передаем строку s
       						p != NULL;                  // пока не нашли новый разделитель
    						p = strtok (NULL, delim) )  // в следующий раз вызываем от NULL
    					printf("%s\n", p);              // вместо разделителя \0, поэтому можно напечатать токен от p до \0

#include <ctype.h>		// стандартные функции СИ по проверке чего-то. наприме, isalpha(x)

